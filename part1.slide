First steps with Go - part 1
Golab
22 Oct 2018

Aurélien Rainone
Go Programmer at Develer
github.com/arl
aurelien@develer.com

: thanks
: welcome
: Aurélien
: assisted by Ruggi, Vincenzo
: we're all here to answer all questions

* Go?

: programmer for 15 years
: C, C++ mostly
: discovered Go 3 years ago, loved it!

: working full-time on project involving Go and embedded.

* Develer

- software / hardware
- open-source
- new technologies

.link https://www.develer.com/
.image ./img/develer-logo.png

: we develop software and hardware solutions for customers
: strong open-source culture

* Workshop goal

- for *begginers* in Go
- make *you* write some code!

: people that know to program, and want to learn Go.
: goal is to get a feeling of the language, see and write code.

* Workshop schedule

- part 1. Short language overview, many interactive examples. (1h30)
- part 2. Write a complete program. (1h30+)

: What are we going to do?
: 2 parts, complementary, you can follow separately.
: 1st part (now -=> coffee break)
: 2nd part (coffee break -> until the end)

* Ready?

: Audience Background? Coming from C++, Java, PHP ?
: Installed Go?

* First steps with Go - part 1

1) The language
2) The toolchain
3) A tour of Go

: dont wait here

* The language

* The language

- compiled
- static typing
- garbage collected
- concurrency ready
- safe

: compiled     :
: static typing:   types are checked at compile-time
: GC           :   Go has a garbage collector
: concurrency  :   Concurrency primitives
: safe         :   -     memory-safe (pointers but no pointers arithmetic)
:                  - NOT concurrent safe (data race are possible)

* The toolchain: 'go'

: go = language
: go tool : command-line tool named go
: let's see what we can do with the `go tool`

* Compile

and cross-compile...

.code code/tool/dist

: many platforms and architectures

* Build

hello.go:
.code code/tool/hello.go

Produce binary:
.code code/tool/build

: use `go build` to produce binaries

* Run

hello.go:
.code code/tool/hello.go
Produce binary (temp dir) and run it:
.code code/tool/run

: use `go run` to fastly run go code.

* Documentation

.code code/tool/doc
.link https://golang.org
.image img/tool/doc.png 450 _

: `godoc` parses and generates HTML documentation from your code.
: installed alongside `go tool`

* Documentation

Dash (OSX) - Zeal (Linux/Windows)

.image img/tool/zeal.png 450 _

: another easy way to browse documentation for the Go standard library: Dash or Zeal

* Install packages

.code code/tool/get2
.code code/tool/get
.code code/tool/dlv

: `go get` is a package installer, downloader
: download and build dependencies automatically

* Format code

`gofmt`, performed by your IDE.

.code code/tool/fmt1.go
.code code/tool/fmt2.go

: here is an example of what `gofmt` does for you
: don't need to bother about the style
: IDE calls it for you
: also installed alongside `go tool`

* Test suites

xxx_test.go:
.code code/tool/test/func_test.go
.code code/tool/test/test-out

: easy to write and run tests
: file ending with _test.go
: go test

* Benchmarks

xxx_test.go:
.code code/tool/test/bench_test.go
.code code/tool/test/bench-out

: easy to write and run benchmarks
: file ending with _test.go
: go test -bench

* Profile programs

    go tool pprof

.image ./img/tool/pprof-ui-callgraph.gif

: pprof: easy to profile your code
: optimize performance
: call-graph

* Profile programs

    go tool pprof

.image img/tool/pprof-ui-flamegraph.gif

: flame graph since go 1.11

* Profile programs

.image img/tool/pprof-ui-flamegraph-no-anim.png

: visualize time taken by 1000s stack traces all at once
: quickly identity hot code-paths
: y-axis represents stack depth.
: x-axis is not the passing of time but it represents 100% of CPU-time

* A tour of Go

: let's write some code
: the tour of Go is an interactive tool to learn Go

* A tour of Go

- locally
    go tool tour
- online
.link https://tour.golang.org

: open browser
: do the welcome page together

* A tour of Go

.link http://localhost:3999/basics/1
.link https://tour.golang.org/basics/1

Basics: all
Flow control: 1-4, 9-12
More types: 1-8, 16-23
Methods: 1-14, 19-20
Concurrency: 1-6, 9
